[{"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\index.js":"1","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\App.js":"2","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\reportWebVitals.js":"3","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\task.tsx":"4","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\sidebar.tsx":"5","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\infobar.tsx":"6","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\Planned.tsx":"7","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\General.tsx":"8","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\important.tsx":"9","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\addTask.tsx":"10","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\pages\\login.tsx":"11","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\pages\\signup.tsx":"12","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\pages\\dashboard.tsx":"13","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\searchresult.tsx":"14"},{"size":535,"mtime":1683549467501,"results":"15","hashOfConfig":"16"},{"size":1345,"mtime":1685771699543,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1683549467975,"results":"18","hashOfConfig":"16"},{"size":2741,"mtime":1686110861081,"results":"19","hashOfConfig":"16"},{"size":5906,"mtime":1686047642078,"results":"20","hashOfConfig":"16"},{"size":18758,"mtime":1686121879887,"results":"21","hashOfConfig":"16"},{"size":2813,"mtime":1686109353969,"results":"22","hashOfConfig":"16"},{"size":3353,"mtime":1686109491678,"results":"23","hashOfConfig":"16"},{"size":1781,"mtime":1686109344078,"results":"24","hashOfConfig":"16"},{"size":1214,"mtime":1686049068047,"results":"25","hashOfConfig":"16"},{"size":1540,"mtime":1685730116824,"results":"26","hashOfConfig":"16"},{"size":2083,"mtime":1685714949614,"results":"27","hashOfConfig":"16"},{"size":7510,"mtime":1686046968865,"results":"28","hashOfConfig":"16"},{"size":1171,"mtime":1686035249261,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"19u5spn",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\index.js",[],[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\App.js",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\reportWebVitals.js",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\task.tsx",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\sidebar.tsx",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\infobar.tsx",["75"],[],"import React, { memo, useEffect, useState } from \"react\";\r\nimport \"../CSS/infobar.css\";\r\nimport \"../App.css\";\r\nimport { Navigate, useLocation, useNavigate } from \"react-router-dom\";\r\n\r\ninterface infoBarprop {\r\n  genClass: String;\r\n  _id: string;\r\n  name: String;\r\n  steps: string[];\r\n  remindme: null | Date;\r\n  duedate: null | Date;\r\n  repeat: null | { freq: String; on: [String] };\r\n  note: String;\r\n  createdOn: null | Date;\r\n  important: boolean;\r\n  completed: Boolean;\r\n  listnames: { string: string };\r\n}\r\n\r\nfunction Infobar({\r\n  genClass,\r\n  name,\r\n  steps,\r\n  remindme,\r\n  duedate,\r\n  repeat,\r\n  note,\r\n  createdOn,\r\n  important,\r\n  listnames,\r\n  completed,\r\n  _id,\r\n}: infoBarprop) {\r\n  const crossimg = require(\"../Images/rightSidebar-cross.png\");\r\n  const starON = require(\"../Images/task-star-On.png\");\r\n  const starOff = require(\"../Images/task-star.png\");\r\n  const myDaySun = require(\"../Images/infobar-myDaySun.png\");\r\n  const alarmimg = require(\"../Images/rightSidebar-alarm.png\");\r\n  const latertodayimg = require(\"../Images/infobar-latertoday.png\");\r\n  const tomorowimg = require(\"../Images/infobar-tomorow.png\");\r\n  const nextweekimg = require(\"../Images/infobar-nextweek.png\");\r\n  const calenderimg = require(\"../Images/rightsidebar-calender.png\");\r\n  const repeatimg = require(\"../Images/task-repeat.png\");\r\n  const deleteimg = require(\"../Images/infobar-delete.png\");\r\n  const threelines = require(\"../Images/sidebar-horizontallines.png\");\r\n  const addtolist = require(\"../Images/infobar-addtolist.png\");\r\n  const tickimage = require(\"../Images/task-tick.png\");\r\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  const today = new Date();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [infobardynamicWidth, setwidth] = useState(\"390px\");\r\n  const [remindmemenu, setremindmemenu] = useState(false);\r\n  const [duedateMenu, setduedatemenu] = useState(false);\r\n  const [repeatmenu, setrepeatmenu] = useState(false);\r\n  const [addtolistMenu, openaddtolistmenu] = useState(false);\r\n  const [taskname, settaskname] = useState(name);\r\n  const [taskcomplete, setcomplete] = useState(completed);\r\n  const [taskimportant, setimportant] = useState(completed);\r\n  const [duedatestate, setduedatestate] = useState(duedate);\r\n  const [remindmestate, setremindmestate] = useState(remindme);\r\n  const [notestate, setnotestate] = useState(note);\r\n  useEffect(() => {\r\n    settaskname(name);\r\n    setimportant(important);\r\n    setcomplete(completed);\r\n    setduedatestate(duedate ? new Date(duedate) : null);\r\n    setremindmestate(remindme ? new Date(remindme) : null);\r\n    setnotestate(note);\r\n  }, [name, important, completed, duedate, remindme, note]);\r\n  const handlechange = (event) => {\r\n    settaskname(event.target.value);\r\n  };\r\n  const makerequest = (queryobj) => {\r\n    fetch(\"/api/updatetask\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        id: _id,\r\n        query: queryobj,\r\n      }),\r\n    });\r\n  };\r\n  const changetaskname = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      makerequest({ name: taskname });\r\n      navigate(`/dashboard/${page}`);\r\n    }\r\n  };\r\n  createdOn = createdOn ? new Date(createdOn) : null;\r\n  const match = location.pathname.match(/\\/dashboard\\/(.*)/);\r\n  const page = match ? match[1] : null;\r\n  return (\r\n    <div className={genClass} style={{ width: infobardynamicWidth }}>\r\n      <div>\r\n        <div className=\"infobar-firstflex-container\">\r\n          <div className=\"addtolisticon\">\r\n            <img\r\n              src={addtolist}\r\n              alt=\"add to list\"\r\n              onClick={() => {\r\n                openaddtolistmenu(!addtolistMenu);\r\n              }}\r\n            ></img>\r\n            <div\r\n              className={`addtolist ${addtolistMenu ? \"addtolistmenu\" : \"\"}`}\r\n            >\r\n              <>\r\n                {Object.entries(listnames).map(([item, id]) => (\r\n                  <>\r\n                    <div\r\n                      onClick={() => {\r\n                        fetch(\"/api/updatelist\", {\r\n                          method: \"POST\",\r\n                          headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                          },\r\n                          body: JSON.stringify({ id: id, taskid: _id }),\r\n                        });\r\n                        openaddtolistmenu(false);\r\n                      }}\r\n                    >\r\n                      {item}\r\n                    </div>\r\n                    <hr />\r\n                  </>\r\n                ))}\r\n              </>\r\n            </div>\r\n          </div>\r\n          <div className=\"infoBar-close\">\r\n            <div\r\n              onClick={() => {\r\n                infobardynamicWidth === \"0px\"\r\n                  ? setwidth(\"390px\")\r\n                  : setwidth(\"0px\");\r\n              }}\r\n            >\r\n              <img\r\n                src={infobardynamicWidth === \"0px\" ? threelines : crossimg}\r\n                alt=\"cross\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"infoBar-heading\">\r\n          <div className=\"infoBar-heading-firstContainer\">\r\n            <div className=\"infoBar-heading-first\">\r\n              <div\r\n                className={taskcomplete ? \"tick\" : \"tick tickOff\"}\r\n                onClick={() => {\r\n                  makerequest({ completed: !taskcomplete });\r\n                  setcomplete(!taskcomplete);\r\n                  navigate(`/dashboard/${page}`);\r\n                }}\r\n              >\r\n                {taskcomplete ? <img src={tickimage} alt=\"tick\" /> : \"\"}\r\n              </div>\r\n              <div className=\"infobar-taskname\">\r\n                <input\r\n                  name=\"Taskname\"\r\n                  value={taskname}\r\n                  onChange={handlechange}\r\n                  onKeyDown={changetaskname}\r\n                ></input>\r\n              </div>\r\n            </div>\r\n            <div className=\"infoBar-star\">\r\n              <img\r\n                src={taskimportant ? starON : starOff}\r\n                alt=\"star\"\r\n                onClick={() => {\r\n                  makerequest({ important: !taskimportant });\r\n                  setimportant(!taskimportant);\r\n                  navigate(`/dashboard/${page}`);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"infoBar-heading-second\">\r\n            <div className=\"infoBar-tick infoBar-tickOff\"></div>\r\n            <div>\r\n              <input placeholder=\"Add Step\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"infoBar-addMyDay\">\r\n          <div>\r\n            <img src={myDaySun} alt=\"sun\" />\r\n          </div>\r\n          <div\r\n            onClick={() => {\r\n              if (duedatestate !== today) {\r\n                makerequest({ duedate: today.toISOString() });\r\n                setduedatestate(today);\r\n                navigate(`/dashboard/${page}`);\r\n              }\r\n            }}\r\n          >\r\n            Add to My Day\r\n          </div>\r\n        </div>\r\n        <div className=\"infoBar-otherDetails\">\r\n          <div>\r\n            <div className=\"infoBar-otherDetails-first\">\r\n              <div>\r\n                <img src={alarmimg} alt=\"alarm\" />\r\n              </div>\r\n              <div className=\"animation\">\r\n                <div\r\n                  onClick={() => {\r\n                    setremindmemenu(true);\r\n                  }}\r\n                >\r\n                  <div>\r\n                    Remind me\r\n                    {remindmestate != null\r\n                      ? ` at ${remindmestate.getHours()}:00`\r\n                      : \"\"}\r\n                  </div>\r\n                  <div>\r\n                    {remindmestate\r\n                      ? `${\r\n                          days[remindmestate.getDay()]\r\n                        }, ${remindmestate.getDate()} ${\r\n                          months[remindmestate.getMonth()]\r\n                        } `\r\n                      : \"\"}\r\n                  </div>\r\n                </div>\r\n                <div className={`menu ${remindmemenu ? \"remindmeMenu\" : \"\"}`}>\r\n                  <div\r\n                    onClick={() => {\r\n                      let tempdate = new Date();\r\n                      tempdate.setHours(22, 0, 0, 0);\r\n                      makerequest({ remindme: tempdate.toISOString() });\r\n                      setremindmestate(tempdate);\r\n                      setremindmemenu(false);\r\n                    }}\r\n                  >\r\n                    <div>\r\n                      <div>\r\n                        <img src={latertodayimg} alt=\"latertoday\" />\r\n                      </div>\r\n                      <div>Later Today</div>\r\n                    </div>\r\n                    <div>{`${days[today.getDay()]}, 22:00`}</div>\r\n                  </div>\r\n                  <div\r\n                    onClick={() => {\r\n                      let tempdate = new Date();\r\n                      tempdate.setDate(tempdate.getDate() + 1);\r\n                      tempdate.setHours(0, 0, 0, 0);\r\n                      makerequest({ remindme: tempdate.toISOString() });\r\n                      setremindmestate(tempdate);\r\n                      setremindmemenu(false);\r\n                    }}\r\n                  >\r\n                    <div>\r\n                      <div>\r\n                        <img src={tomorowimg} alt=\"tommorow\" />\r\n                      </div>\r\n                      <div>Tomorow</div>\r\n                    </div>\r\n                    <div>{`${\r\n                      days[today.getDay() + 1]\r\n                    }, ${today.getHours()}:00`}</div>\r\n                  </div>\r\n                  <div\r\n                    onClick={() => {\r\n                      let tempdate = new Date();\r\n                      tempdate = new Date(\r\n                        tempdate.getTime() + 7 * 24 * 60 * 60 * 1000\r\n                      );\r\n                      makerequest({ remindme: tempdate.toISOString() });\r\n                      setremindmestate(tempdate);\r\n                      setremindmemenu(false);\r\n                    }}\r\n                  >\r\n                    <div>\r\n                      <div>\r\n                        <img src={nextweekimg} alt=\"nextweek\" />\r\n                      </div>\r\n                      <div>Next Week</div>\r\n                    </div>\r\n                    <div>Sun, 9:00</div>\r\n                  </div>\r\n                  <hr />\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <img src={calenderimg} alt=\"calender\" />\r\n                      </div>\r\n                      <div>Pick a date and time</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div\r\n              className=\"infoBar-otherDetails-second\"\r\n              onClick={() => {\r\n                setremindmemenu(false);\r\n              }}\r\n            >\r\n              <img src={crossimg} alt=\"cross\" />\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div>\r\n            <div className=\"infoBar-otherDetails-first\">\r\n              <div>\r\n                <img src={calenderimg} alt=\"calender\" />\r\n              </div>\r\n              <div\r\n                onClick={() => {\r\n                  setduedatemenu(true);\r\n                }}\r\n              >\r\n                {duedatestate != null\r\n                  ? `${\r\n                      days[duedatestate.getDay()]\r\n                    }, ${duedatestate.getDate()} ${\r\n                      months[duedatestate.getMonth()]\r\n                    }`\r\n                  : \"Add a due date\"}\r\n              </div>\r\n              <div className={`menu ${duedateMenu ? \"duedateMenu\" : \"\"}`}>\r\n                <div\r\n                  onClick={() => {\r\n                    let tempdate = new Date();\r\n                    makerequest({ duedate: tempdate.toISOString() });\r\n                    setduedatestate(tempdate);\r\n                    setduedatemenu(false);\r\n                    navigate(`/dashboard/${page}`);\r\n                  }}\r\n                >\r\n                  <div>\r\n                    <div>\r\n                      <img src={latertodayimg} alt=\"latertoday\" />\r\n                    </div>\r\n                    <div>Today</div>\r\n                  </div>\r\n                  <div>{`${days[today.getDay()]}, 22:00`}</div>\r\n                </div>\r\n                <div\r\n                  onClick={() => {\r\n                    let tempdate = new Date();\r\n                    tempdate.setDate(tempdate.getDate() + 1);\r\n                    tempdate.setHours(0, 0, 0, 0);\r\n                    makerequest({ duedate: tempdate.toISOString() });\r\n                    setduedatestate(tempdate);\r\n                    setduedatemenu(false);\r\n                    navigate(`/dashboard/${page}`);\r\n                  }}\r\n                >\r\n                  <div>\r\n                    <div>\r\n                      <img src={tomorowimg} alt=\"tommorow\" />\r\n                    </div>\r\n                    <div>Tomorow</div>\r\n                  </div>\r\n                  <div>{`${days[today.getDay() + 1]}, 22:00`}</div>\r\n                </div>\r\n                <div\r\n                  onClick={() => {\r\n                    let tempdate = new Date();\r\n                    tempdate = new Date(\r\n                      tempdate.getTime() + 7 * 24 * 60 * 60 * 1000\r\n                    );\r\n                    makerequest({ duedate: tempdate.toISOString() });\r\n                    setduedatestate(tempdate);\r\n                    setduedatemenu(false);\r\n                    navigate(`/dashboard/${page}`);\r\n                  }}\r\n                >\r\n                  <div>\r\n                    <div>\r\n                      <img src={nextweekimg} alt=\"nextweek\" />\r\n                    </div>\r\n                    <div>Next Week</div>\r\n                  </div>\r\n                  <div>Sun, 9:00</div>\r\n                </div>\r\n                <hr />\r\n                <div>\r\n                  <div>\r\n                    <div>\r\n                      <img src={calenderimg} alt=\"calender\" />\r\n                    </div>\r\n                    <div>Pick a date and time</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div\r\n              className=\"infoBar-otherDetails-second\"\r\n              onClick={() => {\r\n                setduedatemenu(false);\r\n              }}\r\n            >\r\n              <img src={crossimg} alt=\"cross\" />\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div>\r\n            <div className=\"infoBar-otherDetails-first\">\r\n              <div>\r\n                <img src={repeatimg} alt=\"repeat\" />\r\n              </div>\r\n              <div>\r\n                <div\r\n                  onClick={() => {\r\n                    setrepeatmenu(true);\r\n                  }}\r\n                >\r\n                  {repeat ? `${repeat.freq}` : \"Repeat\"}\r\n                </div>\r\n                <div>{repeat ? `${repeat.on.join(\", \")}` : \"\"}</div>\r\n                <div className={`menu ${repeatmenu ? \"weeklyMenu\" : \"\"}`}>\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <img src={latertodayimg} alt=\"latertoday\" />\r\n                      </div>\r\n                      <div>Daily</div>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <img src={tomorowimg} alt=\"tommorow\" />\r\n                      </div>\r\n                      <div>Weekdays</div>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <img src={nextweekimg} alt=\"nextweek\" />\r\n                      </div>\r\n                      <div>Weekly</div>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <img src={nextweekimg} alt=\"nextweek\" />\r\n                      </div>\r\n                      <div>Monthly</div>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <img src={nextweekimg} alt=\"nextweek\" />\r\n                      </div>\r\n                      <div>Yearly</div>\r\n                    </div>\r\n                  </div>\r\n                  <hr />\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <img src={calenderimg} alt=\"calender\" />\r\n                      </div>\r\n                      <div>Custom</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div\r\n              className=\"infoBar-otherDetails-second\"\r\n              onClick={() => {\r\n                setrepeatmenu(false);\r\n              }}\r\n            >\r\n              <img src={crossimg} alt=\"cross\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"infoBar-note\">\r\n          <textarea\r\n            placeholder=\"Add note\"\r\n            value={notestate}\r\n            onChange={(event) => {\r\n              setnotestate(event.target.value);\r\n            }}\r\n            onKeyDown={(event) => {\r\n              if (event.key === \"Enter\" && event.shiftKey) {\r\n                event.preventDefault();\r\n                makerequest({ note: notestate });\r\n              }\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n      <div className=\"infoBar-footer\">\r\n        <div className=\"infoBar-footer-text\">\r\n          {createdOn\r\n            ? `Created on ${createdOn.getDate()} ${\r\n                months[createdOn.getMonth()]\r\n              }`\r\n            : \"\"}\r\n        </div>\r\n        <div\r\n          className=\"infoBar-footer-image\"\r\n          onClick={() => {\r\n            fetch(\"/api/deletetask\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify({ id: _id }),\r\n            });\r\n            setwidth(\"0px\");\r\n            navigate(`/dashboard/${page}`);\r\n          }}\r\n        >\r\n          <img src={deleteimg} alt=\"delete\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Infobar);\r\n","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\Planned.tsx",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\General.tsx",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\important.tsx",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\addTask.tsx",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\pages\\login.tsx",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\pages\\signup.tsx",[],[],"F:\\VScode\\ReactJS\\TODO\\todolist\\src\\pages\\dashboard.tsx",["76","77","78"],[],"import React, { memo, useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  Route,\r\n  Routes,\r\n  useLocation,\r\n  useNavigate,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport Sidebar from \"../components/sidebar.tsx\";\r\nimport Important from \"../components/important.tsx\";\r\nimport AddTask from \"../components/addTask.tsx\";\r\nimport Infobar from \"../components/infobar.tsx\";\r\nimport General from \"../components/General.tsx\";\r\nimport Planned from \"../components/Planned.tsx\";\r\nimport Searchres from \"../components/searchresult.tsx\";\r\nimport sidebar from \"../components/sidebar.tsx\";\r\n\r\nfunction Dashboard({ state, updatestate }) {\r\n  const navigate = useNavigate();\r\n  const [listobj, setList] = useState({});\r\n  const location = useLocation();\r\n  const id = useParams();\r\n  const [infobarid, setinfobarstate] = useState(\"-1\");\r\n  const setinfobarid = (newID) => {\r\n    setinfobarstate(newID);\r\n  };\r\n  const [accountObj, setAccount] = useState({\r\n    userId: \"-1\",\r\n    accountName: \"\",\r\n    emailId: \"\",\r\n    profilepic: \"sidebar-tempProfilepic.png\",\r\n  });\r\n  const [generaldata, setgeneral] = useState({\r\n    incomplete: [],\r\n    completed: [],\r\n    setinfobar: setinfobarid,\r\n  });\r\n  const [importantdata, setimportant] = useState({\r\n    tasks: [],\r\n    setinfobar: setinfobarid,\r\n  });\r\n  const [planneddata, setplanned] = useState({\r\n    today: [],\r\n    tomorrow: [],\r\n    previous: [],\r\n    setinfobar: setinfobarid,\r\n  });\r\n  const [infobarObj, setinfobar] = useState({\r\n    genClass: \"infoBar infobar-general\",\r\n    name: \"\",\r\n    steps: [\"\"],\r\n    remind: null,\r\n    dueDate: null,\r\n    repeat: null,\r\n    note: \"\",\r\n    createdOn: null,\r\n    important: false,\r\n    listnames: {},\r\n  });\r\n  const [searchtaskname, settaskname] = useState(\"\");\r\n  const setsearchtaskname = (val) => {\r\n    settaskname(val);\r\n  };\r\n  const [searchresdata, setsearcdata] = useState({\r\n    tasks: [],\r\n  });\r\n  const getListname = async () => {\r\n    try {\r\n      const response = await fetch(\"api/getLists\");\r\n      if (response.ok) {\r\n        return await response.json();\r\n      } else {\r\n        return {};\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const getAccountinfo = async () => {\r\n    try {\r\n      const response = await fetch(\"api/getUser\");\r\n      if (response.ok) {\r\n        return await response.json();\r\n      } else {\r\n        return {};\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const getData = async () => {\r\n    try {\r\n      const match = location.pathname.match(/\\/dashboard\\/(.*)/);\r\n      const page = match ? match[1] : null;\r\n      const idmatch = location.pathname.match(/\\/dashboard\\/lists\\/([^/]+)/);\r\n      const id = idmatch ? idmatch[1] : null;\r\n      if (page === \"important\") {\r\n        let response = await fetch(\"api/getimportant\");\r\n        response = await response.json();\r\n        setimportant({\r\n          tasks: response,\r\n          setinfobar: setinfobarid,\r\n        });\r\n      } else if (page === \"myday\") {\r\n        let response = await fetch(\"api/getmyday\");\r\n        response = await response.json();\r\n        response[\"setinfobar\"] = setinfobarid;\r\n        setgeneral(response);\r\n      } else if (page === \"planned\") {\r\n        let response = await fetch(\"api/getplanned\");\r\n        response = await response.json();\r\n        response[\"setinfobar\"] = setinfobarid;\r\n        setplanned(response);\r\n      } else if (page === \"tasks\") {\r\n        let response = await fetch(\"api/gettasks\");\r\n        response = await response.json();\r\n        response[\"setinfobar\"] = setinfobarid;\r\n        setgeneral(response);\r\n      } else if (page === \"searchres\") {\r\n        let response = await fetch(\"api/searchtask\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ name: searchtaskname }),\r\n        });\r\n        if (response.ok) {\r\n          response = await response.json();\r\n          response[\"setinfobar\"] = setinfobarid;\r\n          setsearcdata(response);\r\n        }\r\n      } else if (id) {\r\n        try {\r\n          let response = await fetch(\"api/getlistdata\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ id: id }),\r\n          });\r\n\r\n          if (response.ok) {\r\n            response = await response.json();\r\n            response[\"setinfobar\"] = setinfobarid;\r\n            setgeneral(response);\r\n          } else {\r\n            console.log(\"Request failed with status:\", response.status);\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const verifySession = async () => {\r\n    try {\r\n      const response = await fetch(\"/api/verifyuser\");\r\n      if (response.ok) {\r\n        updatestate(true);\r\n      } else {\r\n        updatestate(false);\r\n        navigate(\"/\");\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const getinfobarobj = async () => {\r\n    if (infobarid !== \"-1\") {\r\n      try {\r\n        const response = await fetch(\"api/gettaskdetail\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ id: infobarid }),\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          data[\"genClass\"] = \"infoBar infobar-general\";\r\n          data[\"listnames\"] = listobj;\r\n          setinfobar(data);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const triggerdashboard = () => {\r\n    verifySession();\r\n    getData();\r\n  };\r\n  useEffect(() => {\r\n    getListname().then((res) => {\r\n      setList(res);\r\n    });\r\n    getAccountinfo().then((res) => {\r\n      setAccount(res);\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    triggerdashboard();\r\n  }, [id, location]);\r\n  useEffect(() => {\r\n    getinfobarobj();\r\n  }, [infobarid]);\r\n  return (\r\n    <>\r\n      <Sidebar\r\n        genClass=\"sidebar-general\"\r\n        userLists={listobj}\r\n        accountInfo={accountObj}\r\n        setsearchtaskname={setsearchtaskname}\r\n      />\r\n      <div className=\"mainContent-general\">\r\n        <div className=\"mainContent-general-tasklist\">\r\n          <Routes>\r\n            <Route path=\"/myday\" element={<General {...generaldata} />} />\r\n            <Route\r\n              path=\"/important\"\r\n              element={\r\n                <Important {...importantdata} setinfobar={setinfobarid} />\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/planned\"\r\n              element={<Planned {...planneddata} setinfobar={setinfobarid} />}\r\n            ></Route>\r\n            <Route\r\n              path=\"/tasks\"\r\n              element={<General {...generaldata} setinfobar={setinfobarid} />}\r\n            ></Route>\r\n            <Route\r\n              path=\"/lists/:id\"\r\n              element={<General {...generaldata} setinfobar={setinfobarid} />}\r\n            ></Route>\r\n            <Route\r\n              path=\"/searchres\"\r\n              element={\r\n                <Searchres {...searchresdata} setinfobar={setinfobarid} />\r\n              }\r\n            ></Route>\r\n          </Routes>\r\n        </div>\r\n        <div className=\"mainContent-general-addTask\">\r\n          <AddTask />\r\n        </div>\r\n      </div>\r\n      <Infobar {...infobarObj} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Dashboard);\r\n","F:\\VScode\\ReactJS\\TODO\\todolist\\src\\components\\searchresult.tsx",[],[],{"ruleId":"79","severity":1,"message":"80","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":18},{"ruleId":"79","severity":1,"message":"83","line":17,"column":8,"nodeType":"81","messageId":"82","endLine":17,"endColumn":15},{"ruleId":"84","severity":1,"message":"85","line":209,"column":6,"nodeType":"86","endLine":209,"endColumn":20,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":212,"column":6,"nodeType":"86","endLine":212,"endColumn":17,"suggestions":"89"},"@typescript-eslint/no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'sidebar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'triggerdashboard'. Either include it or remove the dependency array.","ArrayExpression",["90"],"React Hook useEffect has a missing dependency: 'getinfobarobj'. Either include it or remove the dependency array.",["91"],{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [id, location, triggerdashboard]",{"range":"96","text":"97"},"Update the dependencies array to be: [getinfobarobj, infobarid]",{"range":"98","text":"99"},[5964,5978],"[id, location, triggerdashboard]",[6030,6041],"[getinfobarobj, infobarid]"]