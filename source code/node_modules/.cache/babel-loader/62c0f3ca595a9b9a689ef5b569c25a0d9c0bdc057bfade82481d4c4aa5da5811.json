{"ast":null,"code":"var _jsxFileName = \"F:\\\\VScode\\\\ReactJS\\\\TODO\\\\todolist\\\\src\\\\components\\\\General.tsx\";\n/*for Pages : \r\nlists, myday, alltasks, important\r\n*/\n/*contains:\r\nnot completed, completed\r\n*/\n\n/* For page Planned task*/\n/*contains\r\nearlier ,today ,later\r\n*/\nimport React from \"react\";\nimport \"../CSS/planned.css\";\nimport \"../App.css\";\nimport { Task } from \"../components/task.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function General(_ref) {\n  let {\n    incomplete,\n    completed\n  } = _ref;\n  const plannedIcon = require(\"../Images/sidebar-box.png\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planned\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planned-heading\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: plannedIcon,\n        alt: \"planned\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Planned\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planned-parts\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: incomplete.map((obj, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Task, {\n            ...obj\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planned-parts\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planned-parts-head\",\n        children: \"Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: completed.map((obj, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Task, {\n            ...obj\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c = General;\nvar _c;\n$RefreshReg$(_c, \"General\");","map":{"version":3,"names":["React","Task","jsxDEV","_jsxDEV","Fragment","_Fragment","General","_ref","incomplete","completed","plannedIcon","require","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","obj","index","_c","$RefreshReg$"],"sources":["F:/VScode/ReactJS/TODO/todolist/src/components/General.tsx"],"sourcesContent":["/*for Pages : \r\nlists, myday, alltasks, important\r\n*/\r\n/*contains:\r\nnot completed, completed\r\n*/\r\n\r\n/* For page Planned task*/\r\n/*contains\r\nearlier ,today ,later\r\n*/\r\nimport React from \"react\";\r\nimport \"../CSS/planned.css\";\r\nimport \"../App.css\";\r\nimport { Task } from \"../components/task.tsx\";\r\n\r\ninterface taskprop {\r\n  name: String;\r\n  dueDate: Date;\r\n  important: boolean;\r\n  repeat: boolean;\r\n  completed: boolean;\r\n  taskID: String;\r\n}\r\n\r\ninterface GeneralProp {\r\n  incomplete: taskprop[];\r\n  completed: taskprop[];\r\n}\r\n\r\nexport function General({ incomplete, completed }: GeneralProp) {\r\n  const plannedIcon = require(\"../Images/sidebar-box.png\");\r\n\r\n  return (\r\n    <div className=\"planned\">\r\n      <div className=\"planned-heading\">\r\n        <img src={plannedIcon} alt=\"planned\"></img>\r\n        <div>Planned</div>\r\n      </div>\r\n      <br />\r\n      <br />\r\n      <div className=\"planned-parts\">\r\n        <div>\r\n          {incomplete.map((obj, index) => (\r\n            <>\r\n              <Task {...obj} />\r\n              <br />\r\n            </>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <br />\r\n      <div className=\"planned-parts\">\r\n        <div className=\"planned-parts-head\">Completed</div>\r\n        <div>\r\n          {completed.map((obj, index) => (\r\n            <>\r\n              <Task {...obj} />\r\n              <br />\r\n            </>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,oBAAoB;AAC3B,OAAO,YAAY;AACnB,SAASC,IAAI,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAgB9C,OAAO,SAASC,OAAOA,CAAAC,IAAA,EAAyC;EAAA,IAAxC;IAAEC,UAAU;IAAEC;EAAuB,CAAC,GAAAF,IAAA;EAC5D,MAAMG,WAAW,GAAGC,OAAO,CAAC,2BAA2B,CAAC;EAExD,oBACER,OAAA;IAAKS,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBV,OAAA;MAAKS,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BV,OAAA;QAAKW,GAAG,EAAEJ,WAAY;QAACK,GAAG,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3ChB,OAAA;QAAAU,QAAA,EAAK;MAAO;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC,eACNhB,OAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNhB,OAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNhB,OAAA;MAAKS,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5BV,OAAA;QAAAU,QAAA,EACGL,UAAU,CAACY,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACzBnB,OAAA,CAAAE,SAAA;UAAAQ,QAAA,gBACEV,OAAA,CAACF,IAAI;YAAA,GAAKoB;UAAG;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACjBhB,OAAA;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,eACN,CACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNhB,OAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNhB,OAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNhB,OAAA;MAAKS,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BV,OAAA;QAAKS,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnDhB,OAAA;QAAAU,QAAA,EACGJ,SAAS,CAACW,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACxBnB,OAAA,CAAAE,SAAA;UAAAQ,QAAA,gBACEV,OAAA,CAACF,IAAI;YAAA,GAAKoB;UAAG;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACjBhB,OAAA;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,eACN,CACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACI,EAAA,GApCejB,OAAO;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}